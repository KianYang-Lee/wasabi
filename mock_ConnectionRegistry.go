// Code generated by mockery v2.42.1. DO NOT EDIT.

//go:build !compile

package wasabi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	websocket "golang.org/x/net/websocket"
)

// MockConnectionRegistry is an autogenerated mock type for the ConnectionRegistry type
type MockConnectionRegistry struct {
	mock.Mock
}

type MockConnectionRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionRegistry) EXPECT() *MockConnectionRegistry_Expecter {
	return &MockConnectionRegistry_Expecter{mock: &_m.Mock}
}

// AddConnection provides a mock function with given fields: ctx, ws, cb
func (_m *MockConnectionRegistry) AddConnection(ctx context.Context, ws *websocket.Conn, cb OnMessage) Connection {
	ret := _m.Called(ctx, ws, cb)

	if len(ret) == 0 {
		panic("no return value specified for AddConnection")
	}

	var r0 Connection
	if rf, ok := ret.Get(0).(func(context.Context, *websocket.Conn, OnMessage) Connection); ok {
		r0 = rf(ctx, ws, cb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Connection)
		}
	}

	return r0
}

// MockConnectionRegistry_AddConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddConnection'
type MockConnectionRegistry_AddConnection_Call struct {
	*mock.Call
}

// AddConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - ws *websocket.Conn
//   - cb OnMessage
func (_e *MockConnectionRegistry_Expecter) AddConnection(ctx interface{}, ws interface{}, cb interface{}) *MockConnectionRegistry_AddConnection_Call {
	return &MockConnectionRegistry_AddConnection_Call{Call: _e.mock.On("AddConnection", ctx, ws, cb)}
}

func (_c *MockConnectionRegistry_AddConnection_Call) Run(run func(ctx context.Context, ws *websocket.Conn, cb OnMessage)) *MockConnectionRegistry_AddConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*websocket.Conn), args[2].(OnMessage))
	})
	return _c
}

func (_c *MockConnectionRegistry_AddConnection_Call) Return(_a0 Connection) *MockConnectionRegistry_AddConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionRegistry_AddConnection_Call) RunAndReturn(run func(context.Context, *websocket.Conn, OnMessage) Connection) *MockConnectionRegistry_AddConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnection provides a mock function with given fields: id
func (_m *MockConnectionRegistry) GetConnection(id string) Connection {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetConnection")
	}

	var r0 Connection
	if rf, ok := ret.Get(0).(func(string) Connection); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Connection)
		}
	}

	return r0
}

// MockConnectionRegistry_GetConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnection'
type MockConnectionRegistry_GetConnection_Call struct {
	*mock.Call
}

// GetConnection is a helper method to define mock.On call
//   - id string
func (_e *MockConnectionRegistry_Expecter) GetConnection(id interface{}) *MockConnectionRegistry_GetConnection_Call {
	return &MockConnectionRegistry_GetConnection_Call{Call: _e.mock.On("GetConnection", id)}
}

func (_c *MockConnectionRegistry_GetConnection_Call) Run(run func(id string)) *MockConnectionRegistry_GetConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConnectionRegistry_GetConnection_Call) Return(_a0 Connection) *MockConnectionRegistry_GetConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionRegistry_GetConnection_Call) RunAndReturn(run func(string) Connection) *MockConnectionRegistry_GetConnection_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionRegistry creates a new instance of MockConnectionRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionRegistry {
	mock := &MockConnectionRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
