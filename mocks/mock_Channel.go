// Code generated by mockery v2.42.1. DO NOT EDIT.

//go:build !compile

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockChannel is an autogenerated mock type for the Channel type
type MockChannel struct {
	mock.Mock
}

type MockChannel_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChannel) EXPECT() *MockChannel_Expecter {
	return &MockChannel_Expecter{mock: &_m.Mock}
}

// Handler provides a mock function with given fields:
func (_m *MockChannel) Handler() http.Handler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func() http.Handler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// MockChannel_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type MockChannel_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
func (_e *MockChannel_Expecter) Handler() *MockChannel_Handler_Call {
	return &MockChannel_Handler_Call{Call: _e.mock.On("Handler")}
}

func (_c *MockChannel_Handler_Call) Run(run func()) *MockChannel_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChannel_Handler_Call) Return(_a0 http.Handler) *MockChannel_Handler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannel_Handler_Call) RunAndReturn(run func() http.Handler) *MockChannel_Handler_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with given fields:
func (_m *MockChannel) Path() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockChannel_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type MockChannel_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *MockChannel_Expecter) Path() *MockChannel_Path_Call {
	return &MockChannel_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *MockChannel_Path_Call) Run(run func()) *MockChannel_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChannel_Path_Call) Return(_a0 string) *MockChannel_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannel_Path_Call) RunAndReturn(run func() string) *MockChannel_Path_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *MockChannel) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChannel_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockChannel_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockChannel_Expecter) Shutdown(ctx interface{}) *MockChannel_Shutdown_Call {
	return &MockChannel_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *MockChannel_Shutdown_Call) Run(run func(ctx context.Context)) *MockChannel_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockChannel_Shutdown_Call) Return(_a0 error) *MockChannel_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannel_Shutdown_Call) RunAndReturn(run func(context.Context) error) *MockChannel_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChannel creates a new instance of MockChannel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChannel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChannel {
	mock := &MockChannel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
