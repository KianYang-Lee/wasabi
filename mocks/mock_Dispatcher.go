// Code generated by mockery v2.42.1. DO NOT EDIT.

//go:build !compile

package mocks

import (
	wasabi "github.com/ksysoev/wasabi"
	mock "github.com/stretchr/testify/mock"
)

// MockDispatcher is an autogenerated mock type for the Dispatcher type
type MockDispatcher struct {
	mock.Mock
}

type MockDispatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDispatcher) EXPECT() *MockDispatcher_Expecter {
	return &MockDispatcher_Expecter{mock: &_m.Mock}
}

// Dispatch provides a mock function with given fields: conn, data
func (_m *MockDispatcher) Dispatch(conn wasabi.Connection, data []byte) {
	_m.Called(conn, data)
}

// MockDispatcher_Dispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispatch'
type MockDispatcher_Dispatch_Call struct {
	*mock.Call
}

// Dispatch is a helper method to define mock.On call
//   - conn wasabi.Connection
//   - data []byte
func (_e *MockDispatcher_Expecter) Dispatch(conn interface{}, data interface{}) *MockDispatcher_Dispatch_Call {
	return &MockDispatcher_Dispatch_Call{Call: _e.mock.On("Dispatch", conn, data)}
}

func (_c *MockDispatcher_Dispatch_Call) Run(run func(conn wasabi.Connection, data []byte)) *MockDispatcher_Dispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(wasabi.Connection), args[1].([]byte))
	})
	return _c
}

func (_c *MockDispatcher_Dispatch_Call) Return() *MockDispatcher_Dispatch_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDispatcher_Dispatch_Call) RunAndReturn(run func(wasabi.Connection, []byte)) *MockDispatcher_Dispatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDispatcher creates a new instance of MockDispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDispatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDispatcher {
	mock := &MockDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
